// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "gophermart-loyalty/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// UseCasesInterface is an autogenerated mock type for the UseCasesInterface type
type UseCasesInterface struct {
	mock.Mock
}

// UserCheckLoginPass provides a mock function with given fields: ctx, login, password
func (_m *UseCasesInterface) UserCheckLoginPass(ctx context.Context, login string, password string) (*models.User, error) {
	ret := _m.Called(ctx, login, password)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.User); ok {
		r0 = rf(ctx, login, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserCreate provides a mock function with given fields: ctx, login, password
func (_m *UseCasesInterface) UserCreate(ctx context.Context, login string, password string) (*models.User, error) {
	ret := _m.Called(ctx, login, password)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.User); ok {
		r0 = rf(ctx, login, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGetByID provides a mock function with given fields: ctx, id
func (_m *UseCasesInterface) UserGetByID(ctx context.Context, id uint64) (*models.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCasesInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCasesInterface creates a new instance of UseCasesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCasesInterface(t mockConstructorTestingTNewUseCasesInterface) *UseCasesInterface {
	mock := &UseCasesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
